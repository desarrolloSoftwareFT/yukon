!!!!    6    0    1 1600570458  V1795                                         
!* Changed short probe for power up
! IPG: rev 09.20p  Wed Jul 08 10:54:04 2020

sequential

vector cycle  10u
receive delay 8u

set terminators to on
default device "u300"
set terminators to on
assign CSB  to pins 7
assign SCK  to pins 16
assign SI   to pins 15
assign SO   to pins 8
assign WPB  to pins 9
assign HLDB to pins 1
assign NC   to pins *,*,*,*,*,*,*,*

assign VCC  to pins *
assign GND  to pins *

power   VCC,GND
inputs  CSB,SCK,SI,WPB,HLDB
outputs SO
nondigital NC

family LVT

set load on pins 8 to pull up

disable SO with CSB to "1"

assign Disablegroup to nodes "BM_SPI_STD_CS0_L" default "1"
assign Disablegroup to nodes "BMFPGA_BUF_SPI_FLSH_SEL" default "0"
inputs Disablegroup

assign DisableFamilyLVT to nodes "BM_SPI_STD_CS0_L"
assign DisableFamilyLVT to nodes "BMFPGA_BUF_SPI_FLSH_SEL"
family LVT on DisableFamilyLVT
inputs DisableFamilyLVT

!IPG: Safeguard will ignore disabled outputs
disabled device "u301" pins 8
!IPG: with pin 7 on node "BM_SPI_STD_CS0_L"
disabled device "x_u17" pins 1,4
!IPG: with pin 6 on node "BMFPGA_BUF_SPI_FLSH_SEL"

vector INIT1
 set CSB   to "1"
 set SCK   to "0"
 set HLDB  to "1"
 set WPB   to "0"
 set SI    to "x"
 set SO    to "x"
end vector

vector KEEP1
 set CSB   to "k"
 set SCK   to "0"
 set HLDB  to "k"
 set WPB   to "k"
 set SI    to "x"
 set SO    to "x"
end vector

vector KEEP2
 set CSB   to "k"
 set SCK   to "0"
 set HLDB  to "k"
 set WPB   to "k"
 set SI    to "k"
 set SO    to "x"
end vector

vector CSB_0
 initialize to KEEP1
 set CSB    to "0"
end vector

vector CSB_1
 initialize to KEEP1
 set CSB    to "1"
end vector

vector SCK_10
 initialize to KEEP1
 set SCK    to "0"
end vector

vector SCK_11
 initialize to KEEP1
 set SCK    to "1"
end vector

vector SCK_20
 initialize to KEEP2
 set SCK    to "0"
end vector

vector SCK_21
 initialize to KEEP2
 set SCK    to "1"
end vector

vector D_0
 initialize to KEEP2
 set SI     to "0"
end vector

vector D_1
 initialize to KEEP2
 set SI     to "1"
end vector

vector R_0
 initialize to KEEP1
 set SO     to "0"
end vector

vector R_1
 initialize to KEEP1
 set SO     to "1"
end vector

vector R_X
 initialize to KEEP1
 set SO     to "x"
end vector

vector WPB_0
 initialize to KEEP1
 set WPB    to "0"
end vector

vector WPB_1
 initialize to KEEP1
 set WPB    to "1"
end vector

vector HLDB_0
 initialize to KEEP1
 set HLDB   to "0"
end vector

vector HLDB_1
 initialize to KEEP1
 set HLDB   to "1"
end vector

! *************************************************

sub IDLE1
 repeat 20 times
  execute INIT1
  execute SCK_11
 end repeat
end sub

sub WBYTE(WD7,WD6,WD5,WD4,WD3,WD2,WD1,WD0)
 execute WD7
 execute SCK_21
 execute WD6
 execute SCK_21
 execute WD5
 execute SCK_21
 execute WD4
 execute SCK_21
 execute WD3
 execute SCK_21
 execute WD2
 execute SCK_21
 execute WD1
 execute SCK_21
 execute WD0
 execute SCK_21
 execute SCK_10
end sub

sub RBYTE(RD7,RD6,RD5,RD4,RD3,RD2,RD1,RD0)
 execute RD7
 execute SCK_11
 execute RD6
 execute SCK_11
 execute RD5
 execute SCK_11
 execute RD4
 execute SCK_11
 execute RD3
 execute SCK_11
 execute RD2
 execute SCK_11
 execute RD1
 execute SCK_11
 execute RD0
 execute SCK_11
 execute SCK_10
end sub

! ********************************************************************


sub DisableSub
  execute DisableVector
end sub

unit "DisableUnit"
  call DisableSub
end unit

unit "WREN, Write Enable command"
 call IDLE1
 execute CSB_0
 call WBYTE(D_0,D_0,D_0,D_0, D_0,D_1,D_1,D_0)
 repeat 10 times
  execute CSB_1
  execute SCK_11
 end repeat
!wait 10m
end unit

unit "RDSR, Read Status Register"
 call IDLE1
 execute CSB_0
 call WBYTE(D_0,D_0,D_0,D_0, D_0,D_1,D_0,D_1)  ! Read Status
 call RBYTE(R_X,R_X,R_X,R_X, R_X,R_X,R_1,R_X)
 repeat 10 times
  execute CSB_1
  execute SCK_11
 end repeat
end unit

unit "WRDI, Write Disable command"
 call IDLE1
 execute CSB_0
 call WBYTE(D_0,D_0,D_0,D_0, D_0,D_1,D_0,D_0)
 repeat 10 times
  execute CSB_1
  execute SCK_11
 end repeat
!wait 10m
end unit

unit "RDSR, Read Status Register"
 call IDLE1
 execute CSB_0
 call WBYTE(D_0,D_0,D_0,D_0, D_0,D_1,D_0,D_1)  ! Read Status
 call RBYTE(R_X,R_X,R_X,R_X, R_X,R_X,R_0,R_X)
 repeat 10 times
  execute CSB_1
  execute SCK_11
 end repeat
end unit

unit "Hold test"
 call IDLE1
 execute CSB_0
 execute HLDB_0
 call WBYTE(D_0,D_0,D_0,D_0, D_0,D_1,D_0,D_1)  ! Read Status
 call RBYTE(R_X,R_X,R_X,R_X, R_X,R_X,R_1,R_X)
 repeat 10 times
  execute CSB_1
  execute SCK_11
 end repeat
end unit

unit  "ID_CHECK"
  call IDLE1
  execute CSB_0
  call WBYTE(D_1,D_0,D_0,D_1, D_1,D_1,D_1,D_1)     !!9F
  call RBYTE(R_0,R_0,R_1,R_0, R_0,R_0,R_0,R_0)     !!20
  call RBYTE(R_1,R_0,R_1,R_1, R_1,R_0,R_1,R_0)     !!BA
  call RBYTE(R_0,R_0,R_0,R_1, R_1,R_0,R_0,R_0)     !!18
  repeat 10 times
  execute CSB_1
  execute SCK_11
 end repeat
end unit

! unit "WPB test"
!  call IDLE1
!  execute CSB_0
!  call WBYTE(D_0,D_0,D_0,D_0, D_1,D_0,D_0,D_1)  ! WRSR, write Status Reg
!  call WBYTE(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_0)  ! Set WPEN
!  repeat 10 times
!   execute CSB_1
!   execute SCK_11
!  end repeat
!  wait 10m
!  execute CSB_0
!  call WBYTE(D_0,D_0,D_0,D_0, D_1,D_1,D_0,D_1)  ! Read Status
!  call RBYTE(R_0,R_X,R_X,R_X, R_X,R_X,R_X,R_X)
!  repeat 10 times
!   execute CSB_1
!   execute SCK_11
!  end repeat
! end unit

